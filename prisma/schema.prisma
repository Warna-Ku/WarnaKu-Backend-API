// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid          String  @id @default(uuid()) @db.VarChar(36)
  email        String  @unique @db.VarChar(100)
  password     String  @db.VarChar(100)
  name         String  @db.VarChar(100)
  token        String? @db.VarChar(512) //Nullable token field
  faceImageURL String?

  // One-to-many relation with colorAnalysisReport as worker`
  colorAnalysesWorker colorAnalysisReport[] @relation("WorkerColorAnalyses")

  // One-to-many relation with Customer

  @@map("users")
}

model Customer {
  customerID   Int     @id @default(autoincrement())
  fullname     String  @unique
  phone        String
  address      String
  email        String
  faceImageURL String?
  //Adding FK that refer to colorAnalysis

  // One-to-many relation with colorAnalysisReport as customer
  colorAnalyses colorAnalysisReport[]

  @@map("customers")
}

model Color {
  colorID     Int     @id @default(autoincrement())
  name        String
  code        String
  description String
  imageURL    String
  paletteID   Int
  palette     Palette @relation(fields: [paletteID], references: [paletteID])

  @@map("colors")
}

model Palette {
  paletteID   Int     @id @default(autoincrement())
  season      String  @unique
  description String  @db.LongText
  imageURL    String
  colors      Color[]

  // Define the relation to colorAnalysisReport
  colorAnalyses colorAnalysisReport[]

  @@map("palettes")
}

model colorAnalysisReport {
  analysisID Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  season     String
  paletteID  Int
  customerID Int
  workerID   String

  // Define relations
  customer Customer @relation(fields: [customerID], references: [customerID])
  worker   User     @relation("WorkerColorAnalyses", fields: [workerID], references: [uid])
  palette  Palette  @relation(fields: [paletteID], references: [paletteID])

  // Ensure that workerID matches the logged-in user's uid
  @@map("color_analysis_reports")
}
